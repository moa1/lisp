;;; See the article "xorshift* / xorshift+ generators and the PRNG shootout".

(defvar *xorshift1024*-random-state* (cons (make-array 16 :element-type '(unsigned-byte 64) :initial-contents '(1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0) :fill-pointer nil :adjustable nil) 0))

(defun xorshift1024* ()
  (declare (optimize (speed 3) (safety 0)))
  (let* ((s (car *xorshift1024*-random-state*))
	 (p (cdr *xorshift1024*-random-state*))
	 (s0 (aref s p))
	 (s1 (aref s (setf p (logand (1+ p) 15)))))
    (declare (type (unsigned-byte 64) p s0 s1) (type (simple-vector 16) s))
    (setf s1 (logxor s1 (logand (ash s1 31) (1- (expt 2 64)))))
    (setf s1 (logxor s1 (logand (ash s1 -11) (1- (expt 2 64)))))
    (setf s0 (logxor s0 (logand (ash s1 -30) (1- (expt 2 64)))))
    (let ((r (logxor s0 s1)))
      (setf (aref s p) r)
      (logand (* r 1181783497276652981) (1- (expt 2 64))))))

(defvar *xorshift128+-random-state* (cons 1 0))

(defun xorshift128+ ()
  (declare (optimize (speed 3) (safety 0)))
  (let ((s1 (car *xorshift128+-random-state*))
	(s0 (cdr *xorshift128+-random-state*)))
    (declare (type (unsigned-byte 64) s0 s1))
    (setf (car *xorshift128+-random-state*) s0)
    (setf s1 (logxor s1 (logand (ash s1 23) (1- (expt 2 64)))))
    (let ((r (logxor s1 s0 (ash s1 -17) (ash s0 -26))))
      (setf (cdr *xorshift128+-random-state*) r)
      (logand (+ r s0) (1- (expt 2 64))))))
